--- !ruby/object:RI::ClassDescription 
attributes: 
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: The client state object, which encapsulates the algorithms used to build packets to send to the server.
    name: client
    rw: R
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: The map of &quot;hints&quot; that can be used to modify the behavior of the packet stream. For instance, when authentication succeeds, an &quot;authenticated&quot; hint is set, which is used to determine whether or not to compress the data when using the &quot;delayed&quot; compression algorithm.
    name: hints
    rw: R
  - !ruby/object:RI::Attribute 
    comment: 
      - !ruby/struct:SM::Flow::P 
        body: The server state object, which encapsulates the algorithms used to interpret packets coming from the server.
    name: server
    rw: R
class_methods: 
  - !ruby/object:RI::MethodSummary 
    name: extended
comment: 
  - !ruby/struct:SM::Flow::P 
    body: A module that builds additional functionality onto the Net::SSH::BufferedIo module. It adds SSH encryption, compression, and packet validation, as per the SSH2 protocol. It also adds an abstraction for polling packets, to allow for both blocking and non-blocking reads.
constants: []

full_name: Net::SSH::Transport::PacketStream
includes: 
  - !ruby/object:RI::IncludedModule 
    name: BufferedIo
instance_methods: 
  - !ruby/object:RI::MethodSummary 
    name: available_for_read?
  - !ruby/object:RI::MethodSummary 
    name: cleanup
  - !ruby/object:RI::MethodSummary 
    name: client_name
  - !ruby/object:RI::MethodSummary 
    name: enqueue_packet
  - !ruby/object:RI::MethodSummary 
    name: if_needs_rekey?
  - !ruby/object:RI::MethodSummary 
    name: initialize_ssh
  - !ruby/object:RI::MethodSummary 
    name: next_packet
  - !ruby/object:RI::MethodSummary 
    name: peer_ip
  - !ruby/object:RI::MethodSummary 
    name: poll_next_packet
  - !ruby/object:RI::MethodSummary 
    name: send_packet
name: PacketStream
superclass: 
